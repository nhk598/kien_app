{"ast":null,"code":"import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\nexport const url = (publicId, options) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  const cl = CoreCloudinary.new();\n  return cl.url(publicId, scOptions);\n};\nexport const openUploadWidget = (options, callback) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\nexport async function fetchPhotos(imageTag, setter) {\n  const options = {\n    cloudName: 'nhk598',\n    format: 'json',\n    type: 'list',\n    version: Math.ceil(new Date().getTime() / 1000)\n  };\n  const urlPath = url(imageTag.toString(), options);\n  fetch(urlPath).then(res => res.text()).then(text => text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []).catch(err => console.log(err));\n}\n;","map":{"version":3,"sources":["C:/Users/Asus/Desktop/kien_app/client/src/cloudinaryService/CloudinaryService.js"],"names":["Cloudinary","CoreCloudinary","Util","url","publicId","options","scOptions","withSnakeCaseKeys","cl","new","openUploadWidget","callback","window","cloudinary","fetchPhotos","imageTag","setter","cloudName","format","type","version","Math","ceil","Date","getTime","urlPath","toString","fetch","then","res","text","JSON","parse","resources","map","image","public_id","catch","err","console","log"],"mappings":"AAAA,SAASA,UAAU,IAAIC,cAAvB,EAAuCC,IAAvC,QAAmD,iBAAnD;AAEA,OAAO,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACtC,QAAMC,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACA,QAAMG,EAAE,GAAGP,cAAc,CAACQ,GAAf,EAAX;AACA,SAAOD,EAAE,CAACL,GAAH,CAAOC,QAAP,EAAiBE,SAAjB,CAAP;AACH,CAJM;AAMP,OAAO,MAAMI,gBAAgB,GAAG,CAACL,OAAD,EAAUM,QAAV,KAAuB;AACnD,QAAML,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACAO,EAAAA,MAAM,CAACC,UAAP,CAAkBH,gBAAlB,CAAmCJ,SAAnC,EAA8CK,QAA9C;AACH,CAHM;AAKP,OAAO,eAAeG,WAAf,CAA2BC,QAA3B,EAAqCC,MAArC,EAA6C;AAChD,QAAMX,OAAO,GAAG;AACZY,IAAAA,SAAS,EAAE,QADC;AAEZC,IAAAA,MAAM,EAAE,MAFI;AAGZC,IAAAA,IAAI,EAAE,MAHM;AAIZC,IAAAA,OAAO,EAAEC,IAAI,CAACC,IAAL,CAAU,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;AAJG,GAAhB;AAOA,QAAMC,OAAO,GAAGtB,GAAG,CAACY,QAAQ,CAACW,QAAT,EAAD,EAAsBrB,OAAtB,CAAnB;AAEAsB,EAAAA,KAAK,CAACF,OAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUE,IAAI,IAAKA,IAAI,GAAGd,MAAM,CAACe,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,SAAjB,CAA2BC,GAA3B,CAA+BC,KAAK,IAAIA,KAAK,CAACC,SAA9C,CAAD,CAAT,GAAsE,EAF7F,EAGKC,KAHL,CAGWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHlB;AAIH;AAAA","sourcesContent":["import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\r\n\r\nexport const url = (publicId, options) => {\r\n    const scOptions = Util.withSnakeCaseKeys(options);\r\n    const cl = CoreCloudinary.new();\r\n    return cl.url(publicId, scOptions);\r\n};\r\n\r\nexport const openUploadWidget = (options, callback) => {\r\n    const scOptions = Util.withSnakeCaseKeys(options);\r\n    window.cloudinary.openUploadWidget(scOptions, callback);\r\n};\r\n\r\nexport async function fetchPhotos(imageTag, setter) {\r\n    const options = {\r\n        cloudName: 'nhk598',\r\n        format: 'json',\r\n        type: 'list',\r\n        version: Math.ceil(new Date().getTime() / 1000),\r\n    };\r\n\r\n    const urlPath = url(imageTag.toString(), options);\r\n\r\n    fetch(urlPath)\r\n        .then(res => res.text())\r\n        .then(text => (text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []))\r\n        .catch(err => console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}